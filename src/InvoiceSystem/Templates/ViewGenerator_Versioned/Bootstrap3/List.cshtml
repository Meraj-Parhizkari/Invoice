@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @GetEnumerableTypeExpression(Model.ViewDataTypeName)

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
        @:@@{
        @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
            @:Layout = "@Model.LayoutPageFile";
        }
        @:}
        @:








        @:
    }
    else
    {
        @:@@{
        @:Layout = null;
        @:}
        @:
        @:<!DOCTYPE html>
        @:
        @:<html>
        @:<head>
            @:<meta name="viewport" content="width=device-width" />
            @:<title>@Model.ViewName</title>
        @:</head>
        @:<body>
            //    PushIndent("    ");
        }
        @:<section id="dom">
            @:<div class="row">
                @:<div class="col-12">
                    @:<div class="card">
                        @:<div class="card-header">
                            @:<h4>@Model.ViewName</h4>
                            @:<p>
                                @:<a asp-action="Create" class="btn-success p-lg-1 rounded">افزودن</a>
                            @:</p>
                        @:</div>
                        @:<div class="card-body card-dashboard table-responsive">
                            @:<table class="table table-striped table-bordered zero-configuration datatable">
                                @:<thead>
                                    @:<tr>
                                        Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
                                        Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

                                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                                        {
                                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                                            {
                                                <th>
                                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                                                </th>
                                            }
                                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                                            {
                                                <th>
                                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
                                                </th>
                                            }
                                        }
                                        @:<th></th>
                                    @:</tr>
                                @:</thead>
                                @:<tbody>
                                    @:@@foreach (var item in Model) {
                                    @:<tr>
                                        foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
                                        {
                                            if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
                                                && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
                                            {
                                                <td>
                                                    @@Html.DisplayFor(modelItem => item.@GetValueExpression(property))
                                                </td>
                                            }
                                            else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
                                            {
                                                <td>
                                                    @@Html.DisplayFor(modelItem => item.@GetValueExpression(navigation).@navigation.DisplayPropertyName)
                                                </td>
                                            }
                                        }
                                        string pkName = GetPrimaryKeyName();
                                        if (pkName != null)
                                        {
                                            @:<td>
                                                @:<a asp-action="Edit" class="success p-0" asp-route-id="@@item.@pkName"><i class=" ft-edit-2 font-medium-3"></i></a>
                                                @:<a asp-action="Details" class="info p-0" asp-route-id="@@item.@pkName"><i class="fa fa-info-circle font-medium-3 mr-2"></i></a>
                                                @:<a asp-action="Delete" class="danger" asp-route-id="@@item.@pkName"><i class="ft ft-trash font-medium-3 mr-2"></i></a>
                                            @:</td>
                                        }
                                        else
                                        {
                                            <td>
                                                @@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                                                @@Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                                                @@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                                            </td>
                                        }
                                    @:</tr>
                                    @:}
                                @:</tbody>








                            @:</table>
                        @:</div>
                    @:</div>
                @:</div>
            @:</div>
        @:</section>








        if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
        {
            //ClearIndent();
        @:</body>
    @:</html>
}
@:@@section Scripts {
<partial name="~/Views/Shared/Admin/_dataTableScript.cshtml" />
<partial name="~/Views/Shared/Admin/_dataTable.cshtml" />
@:}
}

@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }

}
